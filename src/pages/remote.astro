---

/*
Astro was primarily designed for local Markdown files that could be saved inside of your project directory. 
However, there may be certain cases where you need to fetch Markdown from a remote source.
Astro does not include built-in support for remote Markdown! 
To fetch remote Markdown and render it to HTML, you will need to install and configure your own Markdown parser from npm. This will not inherit from any of Astroâ€™s built-in Markdown and MDX settings that you have configured. Be sure that you understand these limitations before implementing this in your project.
*/

// Error message is not very helpful

import { MDXProvider } from '@mdx-js/react';
// import { marked } from 'marked'; // Not working
import { Markdown } from 'astro-remote';

import Layout from '../layouts/Layout.astro';
import Section from '../layouts/Section.astro';
import Blurb from '../components/Blurb.tsx';
import Button from '../components/Button.tsx';
import SellingPoint from '../components/SellingPoint.astro';

const DATO_API_TOKEN = 'bb82b0f655a934b55179f8bc60a4b7';

const graphqlRequest = {
  query: `
    	query {
				datoPage: pageUnique(filter: {url: {eq: "/test-page"}}) {
					url
					content {
						entryId
						content
						assets {
							basename
							md5
							url
							alt
						}
					}
				}
			}
    `,
};

// We can use `await` directly because there is an `async` wrapping this component
const response = await fetch(
  'https://graphql.datocms.com/',
  {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Accept': 'application/json',
      'Authorization': `Bearer ${DATO_API_TOKEN}`,
			"X-Include-Drafts": "true",
    },
    body: JSON.stringify(
      graphqlRequest
    ),
  }
).then((res) => res.json())

const res = await response.data.datoPage.content;
console.log("res: ", res)

---

<Layout title="Astro + DatoCMS POC">
	<!-- <MDXProvider components={{ 
		Button,
		Blurb
	}}> -->
		<Section className="md:grid-cols-2 md:gap-x-20">
			<!-- { res } -->
			<div>
				<Markdown content={res[1].content} components={{ Button, Blurb }} />
			</div>
			<picture>
				<img src={`/${res[1].assets[0].basename}.png`} alt={res[1].assets[0].alt} />
			</picture>
		</Section>
	<!-- </MDXProvider> -->
	<Section className="md:grid-cols-4 gap-8">
		<Markdown content={res[2].content} components={{ SellingPoint }} />
	</Section>
</Layout>

<!-- Styles within a component is scoped to the component, it is similar to styled components  -->
<style>
	h1 {
		font-size: 3rem;
		font-weight: 800;
		margin: 0;
	}
</style>

<!-- Use Vite under the hood -->